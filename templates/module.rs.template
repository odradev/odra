use odra::prelude::*;
use odra::{Module, Variable, ContractEnv};

/// A #module_name module storage definition.
#[odra::module]
pub struct #module_name {
    env: Rc<ContractEnv>,
    value: Variable<bool>,
}

/// Module entrypoints implementation.
#[odra::module]
impl #module_name {
    /// #module_name constructor.
    /// Initializes the contract with the value of value.
    pub fn init(&mut self) {
        self.value.set(false);
    }

    /// Replaces the current value with the passed argument.
    pub fn set(&mut self, value: bool) {
        self.value.set(value);
    }

    /// Retrieves value from the storage.
    /// If the value has never been set, the default value is returned.
    pub fn get(&self) -> bool {
        self.value.get_or_default()
    }
}

#[cfg(test)]
mod tests {
    use super::#module_nameDeployer;

    #[test]
    fn it_works() {
        let env = odra::test_env();
        let mut contract = #module_nameDeployer::init(&env);
        assert!(!contract.get());
        contract.set(true);
        assert!(contract.get());
    }
}